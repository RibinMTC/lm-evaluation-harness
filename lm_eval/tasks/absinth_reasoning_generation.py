import evaluate
from datasets import Dataset

from lm_eval.base import Task, rf
from lm_eval.metrics import mean

wordlength = evaluate.load("word_length", module_type="measurement")


class AbsinthReasoningGenerationTask(Task):
    def doc_to_target(self, doc):
        pass

    def process_results(self, doc, results):
        if len(results[0]) == 0:
            return 0
        results = wordlength.compute(data=results[0])
        return results

    def aggregation(self):
        return {
            "average_word_length": mean
        }

    def higher_is_better(self):
        return {
            "average_word_length": False
        }

    VERSION = 0
    # dataset as denoted in HuggingFace `datasets`.
    DATASET_PATH = "mtc/final_german_faithfulness_benchmark"
    # `DATASET_PATH`. If there aren't specific subsets you need, leave this as `None`.
    DATASET_NAME = None
    article_key_name = "lead_with_article"
    sentence_key_name = "text"
    label_key_name = "label"

    default_prompt_template = """Reply ONLY in German. For the specified article, sentence, and label, explain in detail why the label was selected and the others label were not chosen. The label 'Faithful' indicates the sentence aligns with the article's content, 'Intrinsic Hallucination' means it contradicts or misrepresents the article by swapping entities, dates ,location etc. and 'Extrinsic hallucination' suggests it includes information not present in the article. Don't reply with: the label was chosen... but instead simply provide a concise explanation without mentioning the label. If the label is Intrinsic Hallucination, don't reply with: The information is not contained in the article. Think step by step before providing final explanation.
Artikel: {article}
Satz: {sentence}
Label: {label}
Erklärung:"""

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return False

    def has_test_docs(self):
        return True

    def test_docs(self):
        if self.has_test_docs():
            return self.dataset["train"]

    def doc_to_text(self, doc):
        if self.prompt_template is None:
            self.prompt_template = self.default_prompt_template

        prompt = self.prompt_template.format(article=doc[self.article_key_name],
                                             sentence=doc[self.sentence_key_name], label=doc[self.label_key_name])

        return prompt

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        continuation = rf.greedy_until(ctx, {"until": ["\n"]})
        return continuation


class XnliReasoningGenerationTask(AbsinthReasoningGenerationTask):
    DATASET_PATH = "xnli"
    DATASET_NAME = "de"
    article_key_name = "premise"
    sentence_key_name = "hypothesis"
    label_key_name = "label"
    min_text_length = 50
    max_text_length = 2000
    seed = 42
    sub_sample_size = 3000

    default_prompt_template = """Reply ONLY in German. For the specified article, sentence, and label, explain in detail why the label was selected and the others label were not chosen. The label 'Faithful' indicates the sentence aligns with the article's content, 'Intrinsic Hallucination' means it contradicts or misrepresents the article and 'Extrinsic hallucination' suggests it includes information not present in the article. Don't reply with: the label was chosen... but instead simply provide a concise explanation without mentioning the label. Think step by step before providing final explanation.
       Artikel: {article}
       Satz: {sentence}
       Label: {label}
       Erklärung:"""

    def convert_label(self, label: int) -> str:
        if label == 0:
            return "Faithful"
        elif label == 1:
            return "Extrinsic Hallucination"
        elif label == 2:
            return "Intrinsic Hallucination"
        else:
            raise ValueError(f"Unsupported value for label {label}")

    def test_docs(self):
        if self.has_test_docs():
            train_df = self.dataset["train"].to_pandas()
            train_df[self.label_key_name] = train_df[self.label_key_name].apply(self.convert_label)
            train_df["num_words_article"] = train_df[self.article_key_name].str.len() + train_df[
                self.sentence_key_name].str.len()
            filtered_train_df = train_df[
                (train_df["num_words_article"] > self.min_text_length) & (
                        train_df["num_words_article"] < self.max_text_length)]
            sub_sampled_train_df = filtered_train_df.sample(n=self.sub_sample_size, random_state=self.seed)
            print(sub_sampled_train_df["label"].value_counts())
            return Dataset.from_pandas(sub_sampled_train_df.reset_index(drop=True))


class XsumFaithReasoningGenerationTask(AbsinthReasoningGenerationTask):
    DATASET_PATH = "mtc/full_cleaned_xsum_faith"
    article_key_name = "document"
    sentence_key_name = "claim"
    label_key_name = "label"

    default_prompt_template = """For the specified article, sentence, and label, explain in detail why the label was selected and the others label were not chosen. The label 'Faithful' indicates the sentence aligns with the article's content, 'Intrinsic Hallucination' means it contradicts or misrepresents the article and 'Extrinsic hallucination' suggests it includes information not present in the article. Don't reply with: the label was chosen... but instead simply provide a concise explanation without mentioning the label. Think step by step before providing final explanation.
           Article: {article}
           Sentence: {sentence}
           Label: {label}
           Explanation:"""